package concurrency.other;

import java.util.concurrent.LinkedTransferQueue;

/**
 * Main class of the example. It executes 100 producers and 100 consumers
 */
public class LinkedTransfer {

    /**
     * @param args
     */
    public static void main(String[] args) {

        final int THREADS = 100;
        /*
		 * Create a Linked TransferQueue of Strings to store the objects
		 * generated by the producers and consumed by the consumer
		 */
        LinkedTransferQueue<String> buffer = new LinkedTransferQueue<>();
		/*
		 * An array to store the Thread objects that execute the producers
		 */
        Thread producerThreads[] = new Thread[THREADS];
		
		/*
		 * An array to store the Thread objects that execute the consumers
		 */
        Thread consumerThreads[] = new Thread[THREADS];
		
		/*
		 * Launch 100 Consumer tasks
		 */
        for (int i = 0; i < THREADS; i++) {
            Consumer consumer = new Consumer("Consumer " + i, buffer);
            consumerThreads[i] = new Thread(consumer);
            consumerThreads[i].start();
        }
		
		/*
		 * Launch 100 Producer tasks 
		 */
        for (int i = 0; i < THREADS; i++) {
            Producer producer = new Producer("Producer: " + i, buffer);
            producerThreads[i] = new Thread(producer);
            producerThreads[i].start();
        }
		
		/*
		 * Wait for the finalization of the threads
		 */
        for (int i = 0; i < THREADS; i++) {
            try {
                producerThreads[i].join();
                consumerThreads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

		/*
		 * Write the size of the buffer in the Console
		 */
        System.out.printf("Main: Size of the buffer: %d\n", buffer.size());
        System.out.printf("Main: End of the example\n");
    }

    /**
     * This class implements a Consumer of Strings. It takes
     * 10000 Strings from the buffer
     */
    public static class Consumer implements Runnable {

        /**
         * Buffer to take the Strings
         */
        private LinkedTransferQueue<String> buffer;

        /**
         * Name of the Consumer
         */
        private String name;

        /**
         * Constructor of the class. It initializes all its attributes
         *
         * @param name   Name of the consumer
         * @param buffer Buffer to take the Strings
         */
        public Consumer(String name, LinkedTransferQueue<String> buffer) {
            this.name = name;
            this.buffer = buffer;
        }

        /**
         * Main method of the consumer. It takes 10000 Strings from the
         * buffer
         */
        @Override
        public void run() {
            for (int i = 0; i < 10000; i++) {
                try {
                    buffer.take();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.printf("Consumer: %s: Consumer done\n", name);
        }

    }

    /**
     * This class implements a Producer of Strings. It generates
     * 10000 strings and stores them in the buffer.
     */
    public static class Producer implements Runnable {

        /**
         * Buffer to store the Strings
         */
        private LinkedTransferQueue<String> buffer;

        /**
         * Name of the producer
         */
        private String name;

        /**
         * Constructor of the class. Initializes its parameters
         *
         * @param name   Name of the producer
         * @param buffer Buffer to store the objects
         */
        public Producer(String name, LinkedTransferQueue<String> buffer) {
            this.name = name;
            this.buffer = buffer;
        }

        /**
         * Main method of the producer. Generates 10000 of Strings
         * and stores them in the buffer
         */
        @Override
        public void run() {
            for (int i = 0; i < 10000; i++) {
                buffer.put(name + ": Element " + i);
            }
            System.out.printf("Producer: %s: Producer done\n", name);
        }

    }


}
